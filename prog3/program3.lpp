/*
 program3.lpp
 COSC 4785
 Colton Roach
 September 25, 2022
 some help on c comment matching from stackoverflow.com/questions/2130097/difficulty-getting-c-style-comments-in-flex-lex
*/

%{

using namespace std;

#include "program3.hpp"
#include "program3.tab.hpp"

void yyerror(const char *string)
{
	cerr << string << endl;
	return;
}

%}
%x C_COMMENT

%option outfile="program3_lex.cpp"
%option noyywrap
%option yylineno


%%

"="     {
            //token="ASSIGN";
            return 1;
        }
"=="    {
            //token="EQ";
            return 2;
        }
">"     {
            //token="GT";
            return 3;
        }
"<"     {
            //token="LT";
            return 4;
        }
">="    {
            //token="GEQ";
            return 5;
        }
"<="    {
            //token="LEQ";
            return 6;
        }
"!="    {
            //token="NEQ";
            return 7;
        }
"+"     {
            //token="PLUS";
            return 8;
        }
"-"     {
            //token="MINUS";
            return 9;
        }
"*"     {
            //token="TIMES";
            return 10;
        }
"/"     {
            //token="DIV";
            return 11;
        }
"||"    {
            //token="OR";
            return 12;
        }
"&&"    {
            //token="AND";
            return 13;
        }
"{"     {
            //token="LBRACE";
            return 14;
        }
"}"     {
            //token="RBRACE";
            return 15;
        }
"["     {
            //token="LBRACK";
            return 16;
        }
"]"     {
            //token="RBRACK";
            return 17;
        }
"("     {
            //token="LPAREN";
            return 18;
        }
")"     {
            //token="RPAREN";
            return 19;
        }
"."     {
            //token="DOT";
            return 20;
        }
","     {
            //token="COMMA";
            return 21;
        }
";"     {
            //token="SEMI";
            return 22;
        }
"!"     {
            //token="NOT";
            return 23;
        }
"%"     {
            //token="MOD";
            return 24;
        }
\/\/.*\n  {
            //token="COMMENT";
            return 25;
        }
"/*"    {
            BEGIN(C_COMMENT);
            return 50;
        }
<C_COMMENT>"*/" {
            BEGIN(INITIAL);
            return 53;
        }
<C_COMMENT>\n {
            return 51;
        }
<C_COMMENT>.  {
            return 52;
        }
"this"  {
            //token="THIS";
            return 27;
        }
"if"    {
            //token="IF";
            return 28;
        }
"else"  {
            //token="ELSE";
            return 29;
        }
"while" {
            //token="WHILE";
            return 30;
        }
"int"   {
            //token="INT";
            return 31;
        }
"void"  {
            //token="VOID";
            return 32;
        }
"class" {
            //token="CLASS";
            return 33;
        }
"new"   {
            //token="NEW";
            return 34;
        }
"print" {
            //token="PRINT";
            return 35;
        }
"read"  {
            //token="READ";
            return 36;
        }
"return" {
            //token="RETURN";
            return 37;
        }
"null"  {
            //token="NULLT";
            return 38;
        }
[_a-zA-Z][_a-zA-Z0-9]*  {
            //token="IDENT";
            return 39;
        }
[+-]?[0-9]+  {
            //token="NUMBER";
            return 40;
        }
\n      {
            return 41;
        }
\t      {
            return 42;
        }
" "     {
            return 43;   
        }
.       {
		
            //token="ER_CH";
            //return 45;
        }
%%
