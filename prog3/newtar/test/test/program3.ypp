//program3.ypp
//Colton Roach
//October 18, 2022
//COSC 4785

%{

#include <iostream>
#include <FlexLexer.h>
#include "nodes.hpp"
#include <stdlib.h>

using std::cerr;
using std::cout;
using std::endl;

extern Node *tree;
extern yyFlexLexer scanner;

#define yylex() scanner.yylex()

void yyerror(const char* str)
{
  cerr << str << endl;
}

%}


%union {
    Node *ttype;
}


%type<ttype> program elements vardec exp newexp type simpletype bracketexps
%type<ttype> bracketexp multibrackets name ident number
%token INT ID 
%token SEMI NUMBER READ LPAREN RPAREN ASSIGN
%token NEW THIS NULLT 
%token LBRACE RBRACE DOT COMMA
%token IF WHILE VOID CLASS PRINT RETURN
%left EQ NE GE LE GT LT NOT 
%left PLUS MINUS OR 
%left TIMES DIV MOD AND
%token THEN ELSE
%token LBRACK RBRACK


%%

program: 
    elements{
        $$ = new nodeProgram($1);
	tree = $$;
	//cout << $$->getLabel();
    }
    | program elements{
	$$ = new nodeProgram($1, $2);
	tree = $$;
	//cout << $$->getLabel();
    }
;

elements:
    vardec{
        $$ = new nodeElements($1, 1);
        //cout << $$->getLabel() << endl;
    }
    | exp SEMI{
        $$ = new nodeElements($1, 2);
    }
;
vardec:
    type ident SEMI{
        $$ = new nodeVarDec($1, $2, 1);
        //cout << $$->getLabel() << endl;
    }
    | ident ident SEMI{
    	$$ = new nodeVarDec($1, $2, 2);
    }
    | type multibrackets ident SEMI{
    	$$ = new nodeVarDec($1, $2, $3, 3);
    }
    | ident multibrackets ident SEMI{
    	$$ = new nodeVarDec($1, $2, $3, 4);
    }
;
exp:
    name{
        $$ = new nodeExp($1, 1);
    }
    | number{
        $$ = new nodeExp($1, 2);
        //cout << $$->getLabel() <<endl;
    }
    | NULLT{
        $$ = new nodeExp(3);
    }
    | READ LPAREN RPAREN{
        $$ = new nodeExp(4);
    }
    | newexp{
        $$ = new nodeExp($1, 5);
    }
    | LPAREN exp RPAREN{
        $$ = new nodeExp($2, 6);
    }
    | name LPAREN RPAREN{
        $$ = new nodeExp($1, 7);
    }
    | exp PLUS exp{
        $$ = new nodeExp($1, $3, 8);
    }
    | exp MINUS exp{
        $$ = new nodeExp($1, $3, 9);
    }
    | exp OR exp{
        $$ = new nodeExp($1, $3, 10);
    }
    | exp TIMES exp{
        $$ = new nodeExp($1, $3, 11);
    }
    | exp DIV exp{
        $$ = new nodeExp($1, $3, 12);
    }
    | exp MOD exp{
        $$ = new nodeExp($1, $3, 13);
    }
    | exp AND exp{
        $$ = new nodeExp($1, $3, 14);
    }
    | exp EQ exp{
        $$ = new nodeExp($1, $3, 15);
    }
    | exp NE exp{
        $$ = new nodeExp($1, $3, 16);
    }
    | exp GE exp{
        $$ = new nodeExp($1, $3, 17);
    }
    | exp LE exp{
        $$ = new nodeExp($1, $3, 18);
    }
    | exp GT exp{
        $$ = new nodeExp($1, $3, 19);
    }
    | exp LT exp{
        $$ = new nodeExp($1, $3, 20);
    }
    | MINUS exp{
        $$ = new nodeExp($2, 21);
    }
    | PLUS exp{
        $$ = new nodeExp($2, 22);
    }
    | NOT exp{
        $$ = new nodeExp($2, 23);
    }
;
newexp:
    NEW ident LPAREN RPAREN{
        $$ = new nodeNewExp($2, 1); 
    }
    | NEW simpletype{
        $$ = new nodeNewExp($2, 2);
    }
    | NEW simpletype bracketexps{
        $$ = new nodeNewExp($2, $3, 3);
    }
    | NEW ident bracketexps{
        $$ = new nodeNewExp($2, $3, 4);
    }
    | NEW simpletype bracketexps multibrackets{
        $$ = new nodeNewExp($2, $3, $4, 5);
    }
    | NEW ident bracketexps multibrackets{
        $$ = new nodeNewExp($2, $3, $4, 6);
    }
;
type:
    simpletype{
        $$ = new nodeType($1);
        //cout << $$->getLabel() << endl;
    }
;
simpletype:
    INT{
        $$ = new nodeSimpleType();
        //cout << $$->getLabel() << endl;
    }
;
bracketexps:
    bracketexp{
        $$ = new nodeBracketExps($1); 
    }
    | bracketexps bracketexp{
        $$ = new nodeBracketExps($1, $2);
    }
;
bracketexp:
    LBRACK exp RBRACK{
        $$ = new nodeBracketExp($2);
    }
;
multibrackets:
    LBRACK RBRACK{
        $$ = new nodeMultibrackets();
    }
    | multibrackets LBRACK RBRACK{
        $$ = new nodeMultibrackets($1);
    }
;
name:
    THIS{
        $$ = new nodeName();
    }
    | ident{
        $$ = new nodeName($1);
    }
    | name DOT ident{
        $$ = new nodeName($1, $3, 3);
    }
    | name bracketexps{
        $$ = new nodeName($1, $2, 4);
    }
;

ident: ID { $$=new nodeID(scanner.YYText());}
number: NUMBER { 
        $$=new nodeNum(atoi(scanner.YYText()));
    }


%%
